import { dirname, join } from 'node:path';
import { fileURLToPath } from 'node:url';
import { generateTypes } from '@internal/types-builder';
import { copy } from 'fs-extra';
import { defineConfig } from 'tsup';

export default defineConfig({
  entry: [
    'src/index.ts',
    'src/analytics/index.ts',
    'src/commands/create/create.ts',
    'src/commands/dev/telemetry-loader.ts',
    'src/commands/dev/telemetry-resolver.ts',
  ],
  treeshake: true,
  format: ['esm'],
  publicDir: './src/public',
  dts: false,
  clean: true,
  sourcemap: true,
  // Mark Node.js built-ins and problematic packages as external
  external: [
    // Node.js built-ins
    'fs',
    'fs/promises',
    'path',
    'os',
    'crypto',
    'util',
    'events',
    'stream',
    'buffer',
    'url',
    'querystring',
    'http',
    'https',
    'net',
    'tls',
    'zlib',
    'child_process',
    'cluster',
    'dgram',
    'dns',
    'domain',
    'module',
    'perf_hooks',
    'process',
    'punycode',
    'readline',
    'repl',
    'string_decoder',
    'timers',
    'tty',
    'v8',
    'vm',
    'worker_threads',
    'assert',
    'constants',
    'inspector',
    'async_hooks',
    // Node.js built-ins with node: prefix
    'node:fs',
    'node:fs/promises',
    'node:path',
    'node:os',
    'node:crypto',
    'node:util',
    'node:events',
    'node:stream',
    'node:buffer',
    'node:url',
    'node:querystring',
    'node:http',
    'node:https',
    'node:net',
    'node:tls',
    'node:zlib',
    'node:child_process',
    'node:cluster',
    'node:dgram',
    'node:dns',
    'node:domain',
    'node:module',
    'node:perf_hooks',
    'node:process',
    'node:punycode',
    'node:readline',
    'node:repl',
    'node:string_decoder',
    'node:timers',
    'node:tty',
    'node:v8',
    'node:vm',
    'node:worker_threads',
    'node:assert',
    'node:constants',
    'node:inspector',
    'node:async_hooks',
    // Problematic packages that use dynamic requires
    'rollup',
    'esbuild',
    'debug',
    'supports-color',
    'ms',
    'chalk',
    'kleur',
    'picocolors',
    'ansi-styles',
    'strip-ansi',
    'wrap-ansi',
    'string-width',
    'emoji-regex',
    'is-fullwidth-code-point',
    'ansi-regex',
  ],
  // Prevent bundler from trying to analyze dynamic imports
  esbuildOptions(options) {
    options.platform = 'node';
    options.target = 'node18';
  },
  onSuccess: async () => {
    const playgroundPath = dirname(fileURLToPath(import.meta.resolve('@internal/playground/package.json')));

    await copy(join(playgroundPath, 'dist'), 'dist/playground');
    await generateTypes(process.cwd());
  },
});
